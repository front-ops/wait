---
import logoText from '../assets/img/logo-text.png';
const services = [
    {
        title: 'Инфлюенс',
        description: `реклама вашего бренда у блогеров для генерации лидов и повышения узнаваемости. пишем сами сценарии размещения, так и работаем с вашими. поторгуемся 
с блогерами за вас и берем всю бумажную волокиту на себя. `,
    },
    {
        title: 'Дизайн',
        description: `Мы сделаем вам сочный брендинг, который будет выделяться на рынке.  А ещё мы закроем все ваши текущие задачи по дизайну. Просто отдайте нам ваши задачи. И вы будете тратить меньше, чем на зарплату штатного сотрудника.`,
    },
    {
        title: 'Мерч',
        description: `А ещё мы шьем классный мерч.  Берем на себя всю головную боль о разработки лекал, этикеток, выбору тканей и заканчивая доставкой  С вас согласование и оплата`,
    },
    {
        title: 'Озвучка',
        description: `У нас эксклюзивные контракты с ведущими студиями професииональной озвучки. Мы можем нативно интегрировать информацию о вашем бренде в кино и сериалы`,
    },
]

---
<div class="services">
    <div class="services-container">
        <div class='services-logo container'>
            <img src={logoText.src} alt="logo" class="" />
        </div>
        <div class="services-carousel">
            {services.map((_service, i) => (
                <div class="service-slide container">
                    <p>{services[i].description}</p>
                    <h2>{services[i].title}</h2>
                </div>
            ))}
        </div>
        <div class="services-nav container">
            {services.map((_service, i) => (
                <div class="service-nav__item" data-index={i}></div>
            ))}
        </div>
    </div>
</div>
<style lang="scss">
    .services {
        width: 100%;
        position: relative;
        overflow: hidden;
        @media (max-width: 767px) {
            height: 100vh;
            overflow: hidden;
        }
    }
    .services-container {
        height: 100vh;
        overflow: hidden;
        position: sticky;
        top: 0;
        background: linear-gradient(90deg, #FF0033 0%, #0A00DD 100%);
        @media (max-width: 767px) {
            position: static;
            height: 100vh;
        }
    }
    .services-logo {
        position: absolute;
        width: 100%;
        top: 32px;
        left: 0;
        &>img {
            width: 106px;
        }
        @media (max-width: 767.98px) {
            top: 16px;
            &>img {
                width: 80px;
            }
        }
    }
    .services-nav {
        bottom: 40px;
        position: absolute;
        display: flex;
        width: 100%;;
        justify-content: space-between;
        align-items: center;
        bottom: 20px;
        gap: 10px;
    }
    .service-nav__item {
        z-index: 100;
        width: 100%;
        height: 4px;
        border-radius: 2px;
        background-color: rgba(#fff, 0.5);
        transition: background-color 0.3s ease-in-out;
    }

    .active {
        background-color: #fff;
    }
    .services-carousel {
        display: flex;
        width: 100%;
        height: 100%;
        @media (max-width: 767px) {
            
            touch-action: pan-x;
            will-change: transform;
        }
    }
    .service-slide {
        flex: 0 0 100%;
        height: 100vh;
        display: flex;
        flex-direction: column;
        justify-content: end;
        color: white;
        
    padding-bottom: 100px;

  @media (min-width: 575.98px) {
    padding: 0 calc(50vw - 270px);
    
    padding-bottom: 100px;

  }

  @media (min-width: 767.98px) {
    padding: 0 calc(50vw - 360px);
    
    padding-bottom: 100px;

  }

  @media (min-width: 991.98px) {
    padding: 0 calc(50vw - 480px);
    
    padding-bottom: 100px;
        }

    @media (min-width: 1199.98px) {
            padding: 0 calc(50vw - 648px);
            
            padding-bottom: 100px;
    }
    
    h2 {
        font-size: 4rem;
        margin-bottom: 1rem;
        @media (max-width: 991.98px) {
            font-size: 3rem;
        }
        @media (max-width: 767.98px) {
            font-size: 2rem;
        }
    }
    p {
        font-size: 1.5rem;
        @media (max-width: 991.98px) {
            font-size: 1.25rem;
        }
        @media (max-width: 767.98px) {
            font-size: 0.875rem;
            line-height: 1.4;
        }
    }

    @media (max-width: 767px) {
        padding-bottom: 80px;
        justify-content: center;
    }

    }


    
</style>

<script>
    import { gsap } from "gsap";
    import { ScrollTrigger } from "gsap/ScrollTrigger";
    import { Draggable } from "gsap/Draggable";

    gsap.registerPlugin(ScrollTrigger, Draggable);

    const slides = document.querySelectorAll('.service-slide');
    const navItems = document.querySelectorAll('.service-nav__item');
    const totalSlides = slides.length;

    let scrollTriggerInstance: gsap.core.Tween | null = null;
    let draggableInstance: Draggable | null = null;

    function initDesktopVersion() {
        if (draggableInstance) {
            draggableInstance.kill();
            draggableInstance = null;
            gsap.set('.services-carousel', { x: 0 });
        }

        scrollTriggerInstance = gsap.to('.services-carousel', {
            x: () => -(100 * (totalSlides - 1)) + '%',
            ease: "none",
            scrollTrigger: {
                trigger: ".services-container",
                start: "top top",
                end: () => "+=" + (100 * totalSlides) + "%",
                scrub: 0.5,
                pin: true,
                anticipatePin: 1,
                snap: {
                    snapTo: 1 / (totalSlides - 1),
                    duration: { min: 0.2, max: 0.3 },
                    delay: 0.2,
                    ease: "power1.inOut"
                },
                onUpdate: (self) => {
                    const activeIndex = Math.round(self.progress * (totalSlides - 1));
                    updateNavigation(activeIndex);
                }
            }
        });
        updateNavigation(0);
    }

    function initMobileVersion() {
        if (scrollTriggerInstance) {
            scrollTriggerInstance.scrollTrigger.kill();
            scrollTriggerInstance = null;
        }

        gsap.set('.services-carousel', { x: 0 });

        draggableInstance = Draggable.create('.services-carousel', {
            type: "x",
            inertia: true,
            edgeResistance: 0.65,
            dragResistance: 0.05,
            bounds: {
                minX: -window.innerWidth * (totalSlides - 1),
                maxX: 0
            },
            snap: {
                x: function(endValue) {
                    const slideWidth = window.innerWidth;
                    const currentSlide = Math.round(Math.abs(endValue) / slideWidth);
                    return -currentSlide * slideWidth;
                }
            },
            onDrag: function() {
                const progress = Math.abs(this.x) / (window.innerWidth * (totalSlides - 1));
                const activeIndex = Math.min(Math.round(progress * (totalSlides - 1)), totalSlides - 1);
                updateNavigation(activeIndex);
            },
            onDragEnd: function() {
                const progress = Math.abs(this.x) / (window.innerWidth * (totalSlides - 1));
                const activeIndex = Math.min(Math.round(progress * (totalSlides - 1)), totalSlides - 1);
                gsap.to('.services-carousel', {
                    x: -activeIndex * window.innerWidth,
                    duration: 0.3,
                    ease: "power2.out"
                });
            },
            minimumMovement: 0.5,
            throwResistance: 3000,
            overshootTolerance: 0.5
        })[0];
        updateNavigation(0);
    }

    function updateNavigation(activeIndex: number) {
        navItems.forEach((item, index) => {
            if (index <= activeIndex) {
                item.classList.add('active');
            } else {
                item.classList.remove('active');
            }
        });
    }

    function handleResize() {
        if (window.innerWidth < 768) {
            initMobileVersion();
        } else {
            initDesktopVersion();
        }
        ScrollTrigger.update();
        updateNavigation(0);
    }

    // Инициализация при загрузке
    handleResize();

    // Обработка изменения размера окна
    window.addEventListener('resize', handleResize);
</script>

<style>
    @media (max-width: 767px) {
        .services-container {
            position: relative !important;
            height: auto !important;
            overflow: visible !important;
        }
    }
</style>

