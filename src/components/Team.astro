---
import { getCollection } from "astro:content";
import ArrowIcon from "./icons/Arrow-icon.astro";

const team = await getCollection('team');   
---

<div class="team-container container">
    <div class="team-header animate-on-scroll">
        <ArrowIcon direction="bottom" /> <span>Посмотрите, какие крутые ребята 
            у нас работают</span>
    </div>
    <div class="team-carousel-wrapper">
        <button class="carousel-button prev" disabled><svg width="33" height="41" viewBox="0 0 33 41" xmlns="http://www.w3.org/2000/svg">
            <path d="M-9.1906e-07 21.0256L33 0L25.5484 21.0256L33 41L-9.1906e-07 21.0256Z" fill="currentColor"/>
            </svg>
        </button>
        <div class="team-carousel-container">
            <div class="team-list" data-motion>
            {team.map(item => (
                <div class="team-item">
                    <img src={item.data.imageSrc} alt={item.data.firstName + " " + item.data.lastName} class="team-item-img" />
                    <div class="team-item-name">{item.data.lastName && <span>{item.data.lastName}</span>} <span>{item.data.firstName}</span></div>
                    <div class="team-item-position">{item.data.position}</div>
                </div>
                ))}
            </div>
        </div>
        <button class="carousel-button next">
            <svg width="33" height="41" viewBox="0 0 33 41" xmlns="http://www.w3.org/2000/svg">
                <path d="M33 19.9744L0 41L7.45161 19.9744L-1.79217e-06 0L33 19.9744Z" fill="currentColor"/>
            </svg>
        </button>
    </div>
</div>

<script>
  const carousel = document.querySelector('.team-list') as HTMLElement;
  const items = carousel.querySelectorAll('.team-item');
  const prevBtn = document.querySelector('.carousel-button.prev') as HTMLButtonElement;
  const nextBtn = document.querySelector('.carousel-button.next') as HTMLButtonElement;
  
  let currentIndex = 0;
  const getItemsPerSlide = () => {
    if (window.innerWidth <= 768) return 1;
    if (window.innerWidth <= 1024) return 2;
    return 4;
  };
  
  let itemsPerSlide = getItemsPerSlide();
  
  function updateCarousel() {
    const offset = -currentIndex * (100 / itemsPerSlide);
    carousel.style.transform = `translateX(${offset}%)`;
    
    prevBtn.disabled = currentIndex === 0;
    nextBtn.disabled = currentIndex >= items.length - itemsPerSlide;
  }

  prevBtn.addEventListener('click', () => {
    if (currentIndex > 0) {
      currentIndex--;
      updateCarousel();
    }
  });

  nextBtn.addEventListener('click', () => {
    if (currentIndex < items.length - itemsPerSlide) {
      currentIndex++;
      updateCarousel();
    }
  });

  window.addEventListener('resize', () => {
    const newItemsPerSlide = getItemsPerSlide();
    if (newItemsPerSlide !== itemsPerSlide) {
      itemsPerSlide = newItemsPerSlide;
      currentIndex = 0;
      updateCarousel();
    }
  });

  // Добавляем переменные для отслеживания свайпов
  let touchStartX = 0;
  let touchEndX = 0;
  
  // Добавляем обработчики событий для свайпов
  carousel.addEventListener('touchstart', (e: TouchEvent) => {
    touchStartX = e.touches[0].clientX;
  });
  
  carousel.addEventListener('touchmove', (e: TouchEvent) => {
    e.preventDefault(); // Предотвращаем прокрутку страницы при свайпе
  });
  
  carousel.addEventListener('touchend', (e: TouchEvent) => {
    touchEndX = e.changedTouches[0].clientX;
    handleSwipe();
  });
  
  function handleSwipe() {
    const swipeThreshold = 50; // Минимальное расстояние для свайпа
    const diff = touchStartX - touchEndX;
    
    if (Math.abs(diff) > swipeThreshold) {
      if (diff > 0 && currentIndex < items.length - itemsPerSlide) {
        // Свайп влево
        currentIndex++;
        updateCarousel();
      } else if (diff < 0 && currentIndex > 0) {
        // Свайп вправо
        currentIndex--;
        updateCarousel();
      }
    }
  }

  updateCarousel();
</script>

<style lang="scss">
    .team-container {
        min-height: 824px;
        height: 100vh;
        background: linear-gradient(180deg, #0A00DD 0%, #050077 100%);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .team-header {
        display: flex;
        align-items: baseline;
        gap: 1rem;
        align-self: flex-start;
    }

    .team-item-img {
        width: 100%;
        object-fit: cover;
    }

    .team-carousel-wrapper {
        width: 100%;
        position: relative;
    }

    .team-item-name {
        margin-top: 1rem;
        font-weight: 700;
        font-size: 24px;
        line-height: 28px;
        text-transform: uppercase;
    }

  .team-carousel-container {
    position: relative;
    overflow: hidden;
    margin: 2rem 0;
    width: 100%;
  }

  .team-list {
    display: flex;
    transition: transform 0.5s ease;
  }

  .team-item {
    flex: 0 0 calc(25%);
    padding: 1rem;
    
    @media (max-width: 1024px) {
      flex: 0 0 calc(50%);
    }
    
    @media (max-width: 768px) {
      flex: 0 0 100%;
    }
  }

  .carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 3;
    background: none;
    border: none;
    cursor: pointer;
    padding: 1rem;
    color: #fff;
    opacity: 0.8;
    transition: opacity 0.3s ease-in-out;

    &.prev {
      left: -4rem;
    }

    &.next {
      right: -4rem;
    }

    &:hover {
        opacity: 1;
    }

    &:disabled {
      opacity: 0.5;
      cursor: default;
    }

    @media (max-width: 768px) {
        display: none;
    }
  }
</style>
